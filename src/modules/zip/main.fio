' -------------------------------------------------
'  Dinfio Programming Language
' -------------------------------------------------
'  By: Muhammad Faruq Nuruddinsyah
'  Copyright (C) 2014-2022. All Rights Reserved.
' -------------------------------------------------
'  Module: ZIP Archiver
' -------------------------------------------------

import fileio
import string
import math
import regex


''
' Simple ZIP archiver module. This module uses <a href="https://linux.die.net/man/1/zip" target="__blank">zip</a> and
' <a href="https://linux.die.net/man/1/unzip" target="__blank">unzip</a> (in Linux and macOS), and uses
' <a href="https://7-zip.org/" target="__blank">7z</a> (in Windows) as its backend.
'
' @brief Simple ZIP archiver
''
function zip::init()
    ''
    ' A default instance of class `zip`
    ''
    global zip: zip = zip()


    ' Internal constants

    if dinfio.is_windows
        global __temp = dinfio.path & "temp/dinfio_zip_"

        global __exec_zip = dinfio.path & "modules/zip/7za a -r \q%zip_output\q %files"
        global __exec_unzip = dinfio.path & "modules/zip/7za x -aoa \q%zip_file\q -o\q%extract_to\q"
        global __exec_list = dinfio.path & "modules/zip/7za l \q%zip_file\q"
    else
        global __temp = "/tmp/dinfio_zip_"
        
        global __exec_zip = "zip -rqq \q%zip_output\q %files"
        global __exec_unzip = "unzip -o -qq \q%zip_file\q -d \q%extract_to\q"
        global __exec_list = "unzip -lqq \q%zip_file\q"
    endif
stop


''
' Main class that implements ZIP creator, extractor, and content list getter
''
class zip
    ''
    ' Create a ZIP archive
    '
    ' @param string zip_output ZIP filename to be created
    ' @param array files Files/directories to be archived. The array can contain path of files and/or directories
    '
    ' @return boolean Returns `true` if succeed, and returns `false` if otherwise
    '
    ' @example
    ' import zip
    '
    ' zip.create("archive.zip", ["file1.txt", "file2.txt", "mydir"])
    ''
    function create(zip_output, files)
        files_str = ""
        log = __temp & randomint(10000, 99999)


        ' Check for files

        for i, 0, size(files) - 1
            if fileexists(files[i])
                files_str &= "\q" & files[i] & "\q "
            else
                error("No such file or directory: " & files[i])
                return false
            endif
        endfor


        ' Delete output first

        if fileexists(zip_output); deletefile(zip_output); endif


        ' Create the zip

        command = replace(__exec_zip, "%zip_output", zip_output)
        command = replace(command, "%files", files_str)
        result = execute(command & " > " & log)

        deletefile(log)

        return result == 0
    stop


    ''
    ' Extract a ZIP file
    '
    ' @param string zip_file ZIP filename to be extracted
    ' @param string extract_to A destination directory where `zip_file` is to be extracted
    '
    ' @return boolean Returns `true` if succeed, and returns `false` if otherwise
    '
    ' @example
    ' import zip
    '
    ' zip.extract("archive.zip", "mydir")
    ''
    function extract(zip_file, extract_to)
        log = __temp & randomint(10000, 99999)


        ' Check for files

        if !fileexists(zip_file)
            error("No such file: " & zip_file)
            return false
        endif

        if !fileexists(extract_to)
            error("No such directory: " & extract_to)
            return false
        endif


        ' Extract the zip

        command = replace(__exec_unzip, "%zip_file", zip_file)
        command = replace(command, "%extract_to", extract_to)
        result = execute(command & " > " & log)

        deletefile(log)

        return result == 0
    stop


    ''
    ' Get contents of a ZIP file
    '
    ' @param string zip_file ZIP filename
    '
    ' @return array Returns the array of files/directories contained in the ZIP file
    '
    ' @example
    ' import zip
    '
    ' contents = zip.list("archive.zip")
    ''
    function list(zip_file)
        contents = []
        log = __temp & randomint(10000, 99999)


        ' Check for file

        if !fileexists(zip_file)
            error("No such file: " & zip_file)
            return contents
        endif


        ' Get the contents of the zip

        command = replace(__exec_list, "%zip_file", zip_file)
        result = execute(command & " > " & log)

        if result == 0
            if !dinfio.is_windows
                f = file(log, file_read)

                while !f.eof()
                    line = regex_search("\S+", f.readln())
                    append(contents, line[3].value)
                endwhile

                f.close()
            else
                f = file(log, file_read)
                start_read = false

                while !f.eof()
                    line = f.readln()

                    if start_read && subleft(line, 5) != "-----" && line != ""
                        parts = regex_search("\S+", line)
                        append(contents, parts[5].value)
                    endif

                    if subleft(line, 5) == "-----"
                        start_read = !start_read
                    endif
                endwhile

                f.close()
            endif
        endif

        deletefile(log)

        return contents
    stop
endclass
