' Solving the system of linear equations using Cramer's Rule

import string

start
    system = [
        [2, 1, 1, 1, 1],   ' 2a +  b +  c +  d = 1
        [1, 3, 1, 1, 2],   '  a + 3b +  c +  d = 2
        [1, 1, 4, 1, 3],   '  a +  b + 4c +  d = 3
        [1, 1, 1, 5, 25]   '  a +  b +  c + 5d = 25
    ]

    solution = cramer(system)
    print()
stop

function print()
    for i, 0, size(solution) - 1
        writeln(fromascii(toascii("a") + i) & " = " & solution[i])
    endfor
stop

function cramer(m)
    rows = size(m)
    cols = size(m[0])
    result = array(rows)

    if rows + 1 != cols
        exit("Cols must be equal to rows + 1")
        return []
    endif


    ' Split matrix into matrix A and B

    a = array2d(rows, cols - 1)
    b = array(rows)

    for i, 0, size(a) - 1
        for j, 0, size(a[0]) - 1
            a[i][j] = m[i][j]
        endfor
    endfor

    for i, 0, size(b) - 1
        b[i] = m[i][cols - 1]
    endfor


    ' Calculate delta of A

    delta = determinant(a)


    ' Solve it

    for i, 0, rows - 1
        tmp = copy(a)

        for j, 0, rows - 1
            tmp[j][i] = b[j]
        endfor

        result[i] = determinant(tmp) / delta
    endfor

    return result
stop

function copy(a)
    result = array2d(size(a), size(a))

    for i, 0, size(a) - 1
        for j, 0, size(a[0]) - 1
            result[i][j] = a[i][j]
        endfor
    endfor

    return result
stop

function determinant(matrix)
    if size(matrix) == 0 || size(matrix) != size(matrix[0])
        exit("Matrix size must be n x n, and n > 0")
        return 0
    endif

    if size(matrix) == 1
        return matrix[0][0]
    elseif size(matrix) == 2
        return (matrix[0][0] * matrix[1][1]) - (matrix[1][0] * matrix[0][1])
    else
        row = row_index(matrix)

        if row == -1
            return 0
        else
            r = matrix[row][0]
            x = 0

            tmp = cofactor(row, matrix)
            m = array2d(size(tmp) - 1, size(tmp) - 1)

            for i, 0, size(tmp) - 1
                if i != row
                    for j, 0, size(m) - 1
                        m[x][j] = tmp[i][j + 1]
                    endfor

                    x += 1
                endif
            endfor

            return r * determinant(m)
        endif
    endif
stop

function cofactor(row, matrix)
    result = array2d(size(matrix), size(matrix))
    r = matrix[row][0]

    for i, 0, size(matrix) - 1
        d = matrix[i][0]

        for j, 0, size(matrix) - 1
            if i == row
                result[i][j] = matrix[i][j]
            else
                result[i][j] = matrix[i][j] - (d / r * matrix[row][j])
            endif
        endfor
    endfor

    return result
stop

function row_index(matrix)
    yield -1

    for i, 0, size(matrix) - 1
        if matrix[i][0] != 0
            return i
        endif
    endfor
stop