' Sudoku solver using backtracking.
' Original source code by Pradeep Mondal P

grid = [
    [3, 0, 6, 5, 0, 8, 4, 0, 0],
    [5, 2, 0, 0, 0, 0, 0, 0, 0],
    [0, 8, 7, 0, 0, 0, 0, 3, 1],
    [0, 0, 3, 0, 1, 0, 0, 8, 0],
    [9, 0, 0, 8, 6, 3, 0, 0, 5],
    [0, 5, 0, 0, 9, 0, 6, 0, 0],
    [1, 3, 0, 0, 0, 0, 2, 5, 0],
    [0, 0, 0, 0, 0, 0, 0, 7, 4],
    [0, 0, 5, 2, 0, 6, 3, 0, 0]
]

print_solution(true)

if solve_sudoku(grid, 0, 0)
    print_solution(false)
else
    writeln("The given sudoku could not be solved.")
endif

function solve_sudoku(grid, row, col)
    var r = row
    var c = col
    var n = size(grid)
    
    if r == n - 1 && c == n; return true; endif

    if c == n
        r += 1
        c = 0
    endif

    if grid[r][c] > 0; return solve_sudoku(grid, r, c + 1); endif

    for num, 1, n
        if is_safe(grid, r, c, num)
            grid[r][c] = num
            if solve_sudoku(grid, r, c + 1); return true; endif
        endif

        grid[r][c] = 0
    endfor

    return false
stop

function is_safe(grid, row, col, num)
    for x, 0, 8
        if grid[row][x] == num; return false; endif
        if grid[x][col] == num; return false; endif
    endfor

    var start_row = row - row % 3
    var start_col = col - col % 3

    for i, 0, 2
        for j, 0, 2
            if grid[i + start_row][j + start_col] == num; return false; endif
        endfor
    endfor

    return true
stop

function print_solution(init)
    if init
        writeln("Input:")
    else
        writeln("\nSolution:")
    endif

    for i, 0, size(grid) - 1
        if i % 3 == 0; writeln("-----------------------"); endif

        for j, 0, size(grid) - 1
            if j % 3 == 0 && j > 0; write(" |"); endif

            write(" " & iif(grid[i][j] > 0, grid[i][j], " "))
        endfor

        writeln()
    endfor

    writeln("-----------------------")
stop
